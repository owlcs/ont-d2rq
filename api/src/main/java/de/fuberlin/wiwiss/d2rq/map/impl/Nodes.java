package de.fuberlin.wiwiss.d2rq.map.impl;

import com.github.owlcs.ontapi.jena.utils.Iter;
import com.github.owlcs.ontapi.jena.utils.Models;
import com.github.owlcs.ontapi.jena.vocabulary.OWL;
import com.github.owlcs.ontapi.jena.vocabulary.RDF;
import de.fuberlin.wiwiss.d2rq.vocab.AVC;
import de.fuberlin.wiwiss.d2rq.vocab.D2RQ;
import org.apache.jena.graph.Node;
import org.apache.jena.vocabulary.RDFS;
import org.apache.jena.vocabulary.XSD;

import java.util.Set;
import java.util.stream.Stream;

/**
 * A helper-aggregator for different D2RQ and OWL resources that are used while schema inference.
 * <p>
 * Created by @ssz on 11.10.2018.
 */
@SuppressWarnings("WeakerAccess")
class Nodes {
    static final Node RDF_FTYPE = RDF.Nodes.type;
    static final Node RDFS_DOMAIN = RDFS.Nodes.domain;
    static final Node RDFS_RANGE = RDFS.Nodes.range;
    static final Node RDFS_IS_DEFINED_BY = RDFS.Nodes.isDefinedBy;
    static final Node RDFS_SUB_CLASS_OF = RDFS.Nodes.subClassOf;
    static final Node RDFS_SUB_PROPERTY_OF = RDFS.Nodes.subPropertyOf;
    static final Node RDFS_LABEL = RDFS.Nodes.label;
    static final Node RDFS_COMMENT = RDFS.Nodes.comment;
    static final Node XSD_STRING = XSD.xstring.asNode();
    static final Node XSD_BOOLEAN_TRUE = Models.TRUE.asNode();

    static final Node OWL_CLASS = OWL.Class.asNode();
    static final Node OWL_NAMED_INDIVIDUAL = OWL.NamedIndividual.asNode();
    static final Node OWL_OBJECT_PROPERTY = OWL.ObjectProperty.asNode();
    static final Node OWL_DATA_PROPERTY = OWL.DatatypeProperty.asNode();
    static final Node OWL_ANNOTATION_PROPERTY = OWL.AnnotationProperty.asNode();
    static final Node OWL_EQUIVALENT_CLASS = OWL.equivalentClass.asNode();
    static final Node OWL_DISJOINT_WITH = OWL.disjointWith.asNode();
    static final Node OWL_PROPERTY_DISJOINT_WITH = OWL.propertyDisjointWith.asNode();
    static final Node OWL_EQUIVALENT_PROPERTY = OWL.equivalentProperty.asNode();
    static final Node OWL_SAME_AS = OWL.sameAs.asNode();
    static final Node OWL_DIFFERENT_FROM = OWL.differentFrom.asNode();

    static final Node D2RQ_CONFIGURATION = D2RQ.Configuration.asNode();
    static final Node D2RQ_TRANSLATION_TABLE = D2RQ.TranslationTable.asNode();
    static final Node D2RQ_TRANSLATION = D2RQ.Translation.asNode();
    static final Node D2RQ_DOWNLOAD_MAP = D2RQ.DownloadMap.asNode();
    static final Node D2RQ_ADDITIONAL_PROPERTY = D2RQ.AdditionalProperty.asNode();
    static final Node D2RQ_DATABASE = D2RQ.Database.asNode();
    static final Node D2RQ_CLASS_MAP = D2RQ.ClassMap.asNode();
    static final Node D2RQ_PROPERTY_BRIDGE = D2RQ.PropertyBridge.asNode();
    static final Node D2RQ_JDBC_DSN = D2RQ.jdbcDSN.asNode();
    static final Node D2RQ_CLASS = D2RQ.clazz.asNode();
    static final Node D2RQ_PROPERTY = D2RQ.property.asNode();
    static final Node D2RQ_CONSTANT_VALUE = D2RQ.constantValue.asNode();
    static final Node D2RQ_BELONGS_TO_CLASS_MAP = D2RQ.belongsToClassMap.asNode();
    static final Node D2RQ_REFERS_TO_CLASS_MAP = D2RQ.refersToClassMap.asNode();
    static final Node D2RQ_DATATYPE = D2RQ.datatype.asNode();
    static final Node D2RQ_COLUMN = D2RQ.column.asNode();
    static final Node D2RQ_PATTERN = D2RQ.pattern.asNode();
    static final Node D2RQ_SQL_EXPRESSION = D2RQ.sqlExpression.asNode();
    static final Node D2RQ_ADDITIONAL_CLASS_DEFINITION_PROPERTY = D2RQ.additionalClassDefinitionProperty.asNode();
    static final Node D2RQ_ADDITIONAL_PROPERTY_DEFINITION_PROPERTY = D2RQ.additionalPropertyDefinitionProperty.asNode();
    static final Node D2RQ_PROPERTY_VALUE = D2RQ.propertyValue.asNode();
    static final Node D2RQ_PROPERTY_NAME = D2RQ.propertyName.asNode();
    static final Node D2RQ_CLASS_DEFINITION_LABEL = D2RQ.classDefinitionLabel.asNode();
    static final Node D2RQ_PROPERTY_DEFINITION_LABEL = D2RQ.propertyDefinitionLabel.asNode();
    static final Node D2RQ_CLASS_DEFINITION_COMMENT = D2RQ.classDefinitionComment.asNode();
    static final Node D2RQ_PROPERTY_DEFINITION_COMMENT = D2RQ.propertyDefinitionComment.asNode();

    static final Node AVC_AUTO_GENERATED = AVC.autoGenerated.asNode();

    static final Set<Node> D2RQ_TYPES = Stream.of(D2RQ_CONFIGURATION,
            D2RQ_DATABASE, D2RQ_TRANSLATION_TABLE, D2RQ_TRANSLATION, D2RQ_DOWNLOAD_MAP, D2RQ_PROPERTY_BRIDGE,
            D2RQ_CLASS_MAP, D2RQ_ADDITIONAL_PROPERTY).collect(Iter.toUnmodifiableSet());

    static final Set<Node> SYMMETRIC_PROPERTY_ASSERTIONS = Stream.of(RDFS_SUB_PROPERTY_OF,
            OWL_EQUIVALENT_PROPERTY, OWL_PROPERTY_DISJOINT_WITH).collect(Iter.toUnmodifiableSet());

    static final Set<Node> SYMMETRIC_CLASS_ASSERTIONS = Stream.of(RDFS_SUB_CLASS_OF,
            OWL_EQUIVALENT_CLASS, OWL_DISJOINT_WITH).collect(Iter.toUnmodifiableSet());

    static final Set<Node> SYMMETRIC_INDIVIDUAL_PREDICATES = Stream.of(OWL_SAME_AS, OWL_DIFFERENT_FROM)
            .collect(Iter.toUnmodifiableSet());
}
